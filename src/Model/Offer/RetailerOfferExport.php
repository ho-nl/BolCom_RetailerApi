<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class RetailerOfferExport
{
    private $offerId;
    private $ean;
    private $referenceCode;
    private $onHoldByRetailer;
    private $price;
    private $stock;
    private $fulfilment;
    private $condition;

    /**
     * @param \BolCom\RetailerApi\Model\Offer\OfferId $offerId
     * @param \BolCom\RetailerApi\Model\Offer\Ean $ean
     * @param \BolCom\RetailerApi\Model\Offer\ReferenceCode $referenceCode
     * @param bool $onHoldByRetailer
     * @param \BolCom\RetailerApi\Model\Offer\Price $price
     * @param \BolCom\RetailerApi\Model\Offer\QuantityInStock $stock
     * @param \BolCom\RetailerApi\Model\Offer\Fulfilment $fulfilment
     * @param \BolCom\RetailerApi\Model\Offer\OfferCondition $condition
     */
    public function __construct(OfferId $offerId, Ean $ean, ReferenceCode $referenceCode, bool $onHoldByRetailer, Price $price, QuantityInStock $stock, Fulfilment $fulfilment, OfferCondition $condition)
    {
        $this->offerId = $offerId;
        $this->ean = $ean;
        $this->referenceCode = $referenceCode;
        $this->onHoldByRetailer = $onHoldByRetailer;
        $this->price = $price;
        $this->stock = $stock;
        $this->fulfilment = $fulfilment;
        $this->condition = $condition;
    }

    public function offerId(): OfferId
    {
        return $this->offerId;
    }

    public function ean(): Ean
    {
        return $this->ean;
    }

    public function referenceCode(): ReferenceCode
    {
        return $this->referenceCode;
    }

    public function onHoldByRetailer(): bool
    {
        return $this->onHoldByRetailer;
    }

    public function price(): Price
    {
        return $this->price;
    }

    public function stock(): QuantityInStock
    {
        return $this->stock;
    }

    public function fulfilment(): Fulfilment
    {
        return $this->fulfilment;
    }

    public function condition(): OfferCondition
    {
        return $this->condition;
    }

    public function withOfferId(OfferId $offerId): RetailerOfferExport
    {
        return new self($offerId, $this->ean, $this->referenceCode, $this->onHoldByRetailer, $this->price, $this->stock, $this->fulfilment, $this->condition);
    }

    public function withEan(Ean $ean): RetailerOfferExport
    {
        return new self($this->offerId, $ean, $this->referenceCode, $this->onHoldByRetailer, $this->price, $this->stock, $this->fulfilment, $this->condition);
    }

    public function withReferenceCode(ReferenceCode $referenceCode): RetailerOfferExport
    {
        return new self($this->offerId, $this->ean, $referenceCode, $this->onHoldByRetailer, $this->price, $this->stock, $this->fulfilment, $this->condition);
    }

    public function withOnHoldByRetailer(bool $onHoldByRetailer): RetailerOfferExport
    {
        return new self($this->offerId, $this->ean, $this->referenceCode, $onHoldByRetailer, $this->price, $this->stock, $this->fulfilment, $this->condition);
    }

    public function withPrice(Price $price): RetailerOfferExport
    {
        return new self($this->offerId, $this->ean, $this->referenceCode, $this->onHoldByRetailer, $price, $this->stock, $this->fulfilment, $this->condition);
    }

    public function withStock(QuantityInStock $stock): RetailerOfferExport
    {
        return new self($this->offerId, $this->ean, $this->referenceCode, $this->onHoldByRetailer, $this->price, $stock, $this->fulfilment, $this->condition);
    }

    public function withFulfilment(Fulfilment $fulfilment): RetailerOfferExport
    {
        return new self($this->offerId, $this->ean, $this->referenceCode, $this->onHoldByRetailer, $this->price, $this->stock, $fulfilment, $this->condition);
    }

    public function withCondition(OfferCondition $condition): RetailerOfferExport
    {
        return new self($this->offerId, $this->ean, $this->referenceCode, $this->onHoldByRetailer, $this->price, $this->stock, $this->fulfilment, $condition);
    }

    public static function fromArray(array $data): RetailerOfferExport
    {
		if (! isset($data['offerId']) || ! \is_string($data['offerId'])) {
			throw new \InvalidArgumentException("Key 'offerId' is missing in data array or is not a string");
		}

		$offerId = OfferId::fromString($data['offerId']);

		if (! isset($data['ean']) || ! \is_string($data['ean'])) {
			throw new \InvalidArgumentException("Key 'ean' is missing in data array or is not a string");
		}

		$ean = Ean::fromString($data['ean']);

		if (! isset($data['referenceCode']) || ! \is_string($data['referenceCode'])) {
			throw new \InvalidArgumentException("Key 'referenceCode' is missing in data array or is not a string");
		}

		$referenceCode = ReferenceCode::fromString($data['referenceCode']);

		$onHoldByRetailer = null;
		if (isset($data['onHoldByRetailer'])) {
			if (is_string($data['onHoldByRetailer'])) {
				if ('false' === $data['onHoldByRetailer']) {
					$onHoldByRetailer = false;
				} elseif ('true' === $data['onHoldByRetailer']) {
					$onHoldByRetailer = true;
				}
			} elseif (\is_bool($data['onHoldByRetailer'])) {
				$onHoldByRetailer = $data['onHoldByRetailer'];
			}
		}
		if (null === $onHoldByRetailer) {
			throw new \InvalidArgumentException("Key 'onHoldByRetailer' is missing in data array or is not a bool");
		}

		if (! isset($data['bundlePricesPrice']) || ! \is_numeric($data['bundlePricesPrice'])) {
			throw new \InvalidArgumentException("Key 'bundlePricesPrice' is missing in data array or is not an array");
		}

		$price = Price::fromScalar((float) $data['bundlePricesPrice']);

		if (! isset($data['stockAmount']) || ! \is_numeric($data['stockAmount'])) {
			throw new \InvalidArgumentException("Key 'stockAmount' is missing in data array or is not an array");
		}

		$stock = QuantityInStock::fromScalar((int) $data['stockAmount']);

		$fulfilmentData = [
			'type' => $data['fulfilmentType'] ?? null,
			'deliveryCode' => $data['fulfilmentDeliveryCode'] ?? null
		];
		$fulfilment = Fulfilment::fromArray($fulfilmentData);

		$conditionData = [
			'name' => $data['conditionName'] ?? null,
			'category' => $data['conditionCategory'] ?? null,
			'comment' => $data['conditionComment'] ?? null,
		];

		$condition = OfferCondition::fromArray($conditionData);

		return new self(
			$offerId,
			$ean,
			$referenceCode,
			$onHoldByRetailer,
			$price,
			$stock,
			$fulfilment,
			$condition
		);
    }

    public function toArray(): array
    {
        return [
            'offerId' => $this->offerId->toString(),
            'ean' => $this->ean->toString(),
            'referenceCode' => $this->referenceCode->toString(),
            'onHoldByRetailer' => $this->onHoldByRetailer,
            'price' => $this->price->toScalar(),
            'stock' => $this->stock->toScalar(),
            'fulfilment' => $this->fulfilment->toArray(),
            'condition' => $this->condition->toArray()
        ];
    }
}
